{
  "bots": [
    {
      "name": "egbert",
      // the personality is included in the beginning of each prompt to GPT
      "personality": "You are Egbert, a sarcastic and witty bot that never gives a straight answer",
      "responseGenerator": "gpt",
      "socialContexts": ["friends", "family"]
    },
    {
      "name": "sherlock",
      "personality": "You are Sherlock, a detective bot that is very good a solving mysteries.",
      "responseGenerator": "gpt",
      "socialContexts": ["friends"],
      "triggers": [
        // triggers are optional. They define what the bot responds to.
        // If you don't provide triggers, it will by default trigger on the bot's name.
        {
          "pattern": "clue", // regexp defining which messages the bot responds to
          "socialContext": "friends", // optionally limit the trigger to one social context
          "probability": 0.5 // optionally set a probability of responding. 1.0 by default.
        },
        {
          "pattern": "murder" // sherlock always responds to 'murder', regardless of social context
        }
      ]
    }
  ],
  /**
    * A response generator is something that receives messages and generates a response.
    */
  "responseGenerators": [
    {
      "name": "gpt",
      "type": "openai", // this means it will talk to the OpenAI API and generate cool AI responses!
      "typeSpecificConfig": {
        "apiKey": "YOUR_API_KEY_HERE", // https://platform.openai.com/account/api-keys
        "model": "gpt-3.5-turbo", // https://platform.openai.com/docs/models/model-endpoint-compatibility
        "temperature": 1 // 0 = more predictable, 1 = more random and creative
      }
    }
  ],

  /*
     A chat source is something that connects to a server, listens for messages,
     asks the bot to generate a response, and sends it back.
     All bots in the same social context are given a chance to generate a response.
  */
  "chatSources": [
    {
      "name": "console",
      "type": "console", // this means you can type messages in the console and get chat responses. Useful for testing.
      "defaultSocialContext": "friends"
    },
    {
      "name": "minecraftFamilyServer",
      "type": "minecraft", // this means it will listen for messages on a minecraft server and respond using RCON and /tellraw
      "defaultSocialContext": "family",
      "typeSpecificConfig": {
        "rconHost": "localhost",
        "rconPort": 25575,
        "rconPassword": "YOUR_RCON_PASSWORD_HERE", // you set this in server.properties
        "serverLogPath": "/home/minecraft/server/logs/latest.log",
        "filter": "(?:DedicatedServer\\/]:\\s|\\[Bot server]:\\s)(.*)" // regexp for the chat messages that should be visible to the bot
      }
    },
    {
      "name": "discord",
      "type": "discord", // this means it will connect to discord, listen for messages and respond when the bot name is mentioned.
      // no defaultSocialContext here, since we map each discord server to a social context below.
      "typeSpecificConfig": {
        "botToken": "YOUR_BOT_TOKEN_HERE", // https://discord.com/developers/applications
        // since the bot logs in to ALL discord servers it has access to, we need to set which server is associated with which social context.
        "discordServers": [
          {
            serverName: "Johnson Friends",
            socialContext: "friends"
          },
          {
            serverName: "Johnson Family",
            socialContext: "family"
          },
        ]
      }
    },

    /*
      For the bot to work in Telegram groups, it needs to be promoted to an admin.
      If you don't want to do that, you can still talk to it in 1:1 mode.

      Get your API token for telegram by talking to @botfather at Telegram. :)
    */
    {
      "name": "telegram",
      "type": "telegram",
      "defaultSocialContext": "friends",
      "typeSpecificConfig": {
         "botToken": "YOUR_BOT_TOKEN_HERE",
      }
    }
  ]
}
